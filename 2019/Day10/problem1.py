import math
import copy

def main():
    """
    print(str(math.atan2(-1 - 0, 0 - 0) * 180 / math.pi + 90))
    print(str(math.atan2(-1 - 0, 1 - 0) * 180 / math.pi + 90))
    print(str(math.atan2(0 - 0, 1 - 0) * 180 / math.pi + 90))
    print(str(math.atan2(1 - 0, 1 - 0) * 180 / math.pi + 90))
    print(str(math.atan2(1 - 0, 0 - 0) * 180 / math.pi + 90))
    print(str(math.atan2(1 - 0, -1 - 0) * 180 / math.pi + 90))
    print(str(math.atan2(0 - 0, -1 - 0) * 180 / math.pi + 90))
    print(str(math.atan2(-1 - 0, -1 - 0) * 180 / math.pi + 90))
    """
    
    with open("input.txt") as f:
        entries = f.readlines()

    entries = [list(entry.strip("\n")) for entry in entries]

    asteroids_coordinates = []

    # List of asteroids positions
    for i in range(len(entries)):
        for j in range(len(entries[0])):
            if entries[i][j] == "#":
                asteroids_coordinates.append((i, j))

    max_observable_asteroids = 0
    max_coordinates = None
    max_angle_to_asteroids = []

    for asteroid in asteroids_coordinates:
        observable_asteroids = 0
        angle_to_asteroids = []
        # Create segments to each asteroid
        for second_asteroid in asteroids_coordinates:
            is_hidden = False
            
            # Do not compare with itself
            if is_different(asteroid, second_asteroid):
                distance = ((asteroid[0] - second_asteroid[0])**2 + (asteroid[1] - second_asteroid[1])**2)**(1/2)
                angle = math.atan2(second_asteroid[1] - asteroid[1], second_asteroid[0] - asteroid[0]) * 180 / math.pi + 180
                if angle <= 0:
                    angle += 360
                angle_to_asteroids.append((second_asteroid[0], second_asteroid[1], distance, angle))
                for third_asteroid in asteroids_coordinates:
                    if is_different(asteroid, second_asteroid) and is_different(asteroid, third_asteroid) and is_different(second_asteroid, third_asteroid):
                        is_hidden = is_hidden_by(asteroid, second_asteroid, third_asteroid)
                        if is_hidden:
                            break

                if not is_hidden:
                    observable_asteroids += 1

        if observable_asteroids > max_observable_asteroids:
            max_observable_asteroids = observable_asteroids
            max_coordinates = (asteroid[0], asteroid[1])
            max_angle_to_asteroids = copy.deepcopy(angle_to_asteroids)
    
    asteroids_to_destroy = sorted(max_angle_to_asteroids, key=lambda x: (x[3], -x[2]))
    print("asteroids_to_destroy =", asteroids_to_destroy)

    print("Found all asteroids to destroy")
    print("Base coordinates: (" + str(max_coordinates[1]) + "," + str(max_coordinates[0]) + ")")
    
    #asteroids_to_destroy = [(1, 10, 12.041594578792296, 4.7636416907261605), (2, 10, 11.045361017187261, 5.194428907734817), (3, 10, 10.04987562112089, 5.710593137499643), (6, 10, 7.0710678118654755, 8.13010235415598), (0, 9, 13.152946437965905, 8.746162262555202), (1, 9, 12.165525060596439, 9.462322208025597), (7, 10, 6.082762530298219, 9.462322208025597), (3, 9, 10.198039027185569, 11.3099324740202), (8, 10, 5.0990195135927845, 11.3099324740202), (4, 9, 9.219544457292887, 12.528807709151522), (0, 8, 13.341664064126334, 12.994616791916513), (1, 8, 12.36931687685298, 14.036243467926482), (5, 9, 8.246211251235321, 14.036243467926482), (9, 10, 4.123105625617661, 14.036243467926482), (2, 8, 11.40175425099138, 15.255118703057747), (6, 9, 7.280109889280518, 15.945395900922875), (3, 8, 10.44030650891055, 16.699244233993625), (0, 7, 13.601470508735444, 17.10272896905238), (1, 7, 12.649110640673518, 18.434948822922024), (10, 10, 3.1622776601683795, 18.434948822922024), (2, 7, 11.704699910719626, 19.98310652189997), (3, 7, 10.770329614269007, 21.801409486351815), (8, 9, 5.385164807134504, 21.801409486351815), (1, 6, 13.0, 22.61986494804043), (6, 8, 7.615773105863909, 23.198590513648185), (4, 7, 9.848857801796104, 23.96248897457818), (2, 6, 12.083045973594572, 24.443954780416533), (0, 5, 14.317821063276353, 24.775140568831915), (1, 5, 13.416407864998739, 26.565051177077976), (3, 6, 11.180339887498949, 26.565051177077976), (9, 9, 4.47213595499958, 26.565051177077976), (11, 10, 2.23606797749979, 26.565051177077976), (0, 4, 14.7648230602334, 28.300755766006375), (2, 5, 12.529964086141668, 28.61045966596521), (4, 6, 10.295630140987, 29.054604099077125), (6, 7, 8.06225774829855, 29.744881296942225), (1, 4, 13.892443989449804, 30.256437163529256), (3, 5, 11.661903789690601, 30.963756532073518), (8, 8, 5.830951894845301, 30.963756532073518), (5, 6, 9.433981132056603, 32.005383208083515), (2, 4, 13.038404810405298, 32.47119229084848), (1, 3, 14.422205101855956, 33.69006752597977), (6, 6, 8.602325267042627, 35.537677791974374), (2, 3, 13.601470508735444, 36.0273733851036), (5, 5, 10.0, 36.86989764584402), (0, 1, 16.401219466856727, 37.56859202882748), (4, 4, 11.40175425099138, 37.87498365109818), (3, 3, 12.806248474865697, 38.65980825409008), (8, 7, 6.4031242374328485, 38.65980825409008), (1, 1, 15.620499351813308, 39.80557109226518), (6, 5, 9.219544457292887, 40.60129464500446), (5, 4, 10.63014581273465, 41.18592516570965), (4, 3, 12.041594578792296, 41.63353933657018), (3, 2, 13.45362404707371, 41.987212495816635), (2, 1, 14.866068747318506, 42.27368900609372), (1, 0, 16.278820596099706, 42.51044707800082), (3, 1, 14.142135623730951, 45.0), (4, 2, 12.727922061357855, 45.0), (5, 3, 11.313708498984761, 45.0), (6, 4, 9.899494936611665, 45.0), (7, 5, 8.48528137423857, 45.0), (8, 6, 7.0710678118654755, 45.0), (9, 7, 5.656854249492381, 45.0), (11, 9, 2.8284271247461903, 45.0), (12, 10, 1.4142135623730951, 45.0), (4, 1, 13.45362404707371, 48.012787504183336), (5, 2, 12.041594578792296, 48.36646066342979), (6, 3, 10.63014581273465, 48.81407483429035), (7, 4, 9.219544457292887, 49.39870535499551), (8, 5, 7.810249675906654, 50.19442890773479), (4, 0, 14.212670403551895, 50.710593137499615), (9, 6, 6.4031242374328485, 51.34019174590989), (6, 2, 11.40175425099138, 52.125016348901795), (7, 3, 10.0, 53.13010235415598), (10, 7, 5.0, 53.13010235415598), (8, 4, 8.602325267042627, 54.46232220802561), (6, 1, 12.206555615733702, 55.00797980144132), (7, 2, 10.816653826391969, 56.309932474020215), (11, 8, 3.605551275463989, 56.309932474020215), (6, 0, 13.038404810405298, 57.52880770915151), (8, 3, 9.433981132056603, 57.9946167919165), (10, 6, 5.830951894845301, 59.03624346792648), (9, 4, 8.06225774829855, 60.25511870305776), (7, 0, 12.529964086141668, 61.38954033403479), (8, 1, 11.180339887498949, 63.43494882292201), (9, 3, 8.94427190999916, 63.43494882292201), (10, 5, 6.708203932499369, 63.43494882292201), (8, 0, 12.083045973594572, 65.55604521958347), (9, 2, 9.848857801796104, 66.03751102542182), (10, 4, 7.615773105863909, 66.8014094863518), (9, 1, 10.770329614269007, 68.19859051364818), (11, 6, 5.385164807134504, 68.19859051364818), (10, 3, 8.54400374531753, 69.44395478041653), (9, 0, 11.704699910719626, 70.01689347810002), (10, 2, 9.486832980505138, 71.56505117707798), (11, 5, 6.324555320336759, 71.56505117707798), (12, 8, 3.1622776601683795, 71.56505117707798), (11, 3, 8.246211251235321, 75.9637565320735), (11, 2, 9.219544457292887, 77.47119229084849), (11, 1, 10.198039027185569, 78.69006752597979), (11, 0, 11.180339887498949, 79.69515353123397), (12, 5, 6.082762530298219, 80.53767779197437), (12, 4, 7.0710678118654755, 81.869897645844), (12, 3, 8.06225774829855, 82.87498365109819), (12, 2, 9.055385138137417, 83.6598082540901), (12, 1, 10.04987562112089, 84.28940686250036), (13, 0, 11.0, 90.0), (13, 1, 10.0, 90.0), (13, 5, 6.0, 90.0), (13, 7, 4.0, 90.0), (13, 8, 3.0, 90.0), (13, 9, 2.0, 90.0), (13, 10, 1.0, 90.0), (14, 0, 11.045361017187261, 95.1944289077348), (14, 2, 9.055385138137417, 96.3401917459099), (14, 3, 8.06225774829855, 97.12501634890181), (14, 4, 7.0710678118654755, 98.13010235415597), (14, 5, 6.082762530298219, 99.46232220802561), (15, 1, 10.198039027185569, 101.30993247402021), (14, 6, 5.0990195135927845, 101.30993247402021), (15, 2, 9.219544457292887, 102.52880770915151), (15, 3, 8.246211251235321, 104.03624346792647), (14, 7, 4.123105625617661, 104.03624346792647), (15, 4, 7.280109889280518, 105.94539590092285), (14, 8, 3.1622776601683795, 108.43494882292201), (17, 1, 10.770329614269007, 111.80140948635182), (15, 6, 5.385164807134504, 111.80140948635182), (16, 4, 7.615773105863909, 113.19859051364818), (18, 0, 12.083045973594572, 114.44395478041653), (17, 3, 8.94427190999916, 116.56505117707799), (16, 5, 6.708203932499369, 116.56505117707799), (14, 9, 2.23606797749979, 116.56505117707799), (19, 0, 12.529964086141668, 118.61045966596521), (18, 2, 10.295630140987, 119.05460409907714), (19, 1, 11.661903789690601, 120.96375653207352), (19, 2, 10.816653826391969, 123.69006752597979), (17, 5, 7.211102550927978, 123.69006752597979), (15, 8, 3.605551275463989, 123.69006752597979), (18, 4, 8.602325267042627, 125.53767779197437), (16, 7, 5.0, 126.86989764584402), (17, 6, 6.4031242374328485, 128.65980825409008), (19, 4, 9.219544457292887, 130.60129464500446), (19, 5, 8.48528137423857, 135.0), (18, 6, 7.0710678118654755, 135.0), (17, 7, 5.656854249492381, 135.0), (16, 8, 4.242640687119285, 135.0), (15, 9, 2.8284271247461903, 135.0), (14, 10, 1.4142135623730951, 135.0), (18, 7, 6.4031242374328485, 141.34019174590992), (17, 8, 5.0, 143.13010235415598), (19, 7, 7.211102550927978, 146.30993247402023), (18, 8, 5.830951894845301, 149.03624346792648), (19, 8, 6.708203932499369, 153.43494882292202), (17, 9, 4.47213595499958, 153.43494882292202), (15, 10, 2.23606797749979, 153.43494882292202), (18, 9, 5.385164807134504, 158.19859051364818), (19, 9, 6.324555320336759, 161.56505117707798), (16, 10, 3.1622776601683795, 161.56505117707798), (17, 10, 4.123105625617661, 165.96375653207352), (18, 10, 5.0990195135927845, 168.6900675259798), (19, 10, 6.082762530298219, 170.53767779197437), (17, 11, 4.0, 180.0), (16, 11, 3.0, 180.0), (14, 11, 1.0, 180.0), (19, 12, 6.082762530298219, 189.46232220802563), (18, 12, 5.0990195135927845, 191.3099324740202), (17, 12, 4.123105625617661, 194.03624346792648), (19, 13, 6.324555320336759, 198.43494882292202), (16, 12, 3.1622776601683795, 198.43494882292202), (18, 13, 5.385164807134504, 201.80140948635182), (17, 13, 4.47213595499958, 206.56505117707798), (15, 12, 2.23606797749979, 206.56505117707798), (18, 14, 5.830951894845301, 210.96375653207352), (19, 15, 7.211102550927978, 213.69006752597977), (17, 14, 5.0, 216.86989764584402), (18, 15, 6.4031242374328485, 218.65980825409008), (17, 15, 5.656854249492381, 225.0), (15, 13, 2.8284271247461903, 225.0), (19, 18, 9.219544457292887, 229.39870535499554), (18, 17, 7.810249675906654, 230.19442890773482), (19, 19, 10.0, 233.13010235415598), (16, 15, 5.0, 233.13010235415598), (18, 18, 8.602325267042627, 234.46232220802563), (17, 17, 7.211102550927978, 236.30993247402023), (15, 14, 3.605551275463989, 236.30993247402023), (18, 19, 9.433981132056603, 237.99461679191648), (16, 16, 5.830951894845301, 239.03624346792648), (17, 18, 8.06225774829855, 240.2551187030578), (17, 19, 8.94427190999916, 243.43494882292202), (16, 17, 6.708203932499369, 243.43494882292202), (14, 13, 2.23606797749979, 243.43494882292202), (16, 18, 7.615773105863909, 246.80140948635182), (15, 16, 5.385164807134504, 248.19859051364818), (16, 19, 8.54400374531753, 249.44395478041653), (14, 14, 3.1622776601683795, 251.56505117707798), (15, 18, 7.280109889280518, 254.05460409907715), (15, 19, 8.246211251235321, 255.96375653207355), (14, 15, 4.123105625617661, 255.96375653207355), (14, 16, 5.0990195135927845, 258.69006752597977), (14, 17, 6.082762530298219, 260.5376777919744), (14, 18, 7.0710678118654755, 261.86989764584405), (14, 19, 8.06225774829855, 262.8749836510982), (13, 16, 5.0, 270.0), (13, 15, 4.0, 270.0), (13, 14, 3.0, 270.0), (13, 13, 2.0, 270.0), (13, 12, 1.0, 270.0), (12, 19, 8.06225774829855, 277.1250163489018), (12, 18, 7.0710678118654755, 278.130102354156), (12, 17, 6.082762530298219, 279.4623222080256), (11, 19, 8.246211251235321, 284.0362434679265), (12, 15, 4.123105625617661, 284.0362434679265), (12, 14, 3.1622776601683795, 288.434948822922), (10, 19, 8.54400374531753, 290.55604521958344), (11, 16, 5.385164807134504, 291.8014094863518), (10, 18, 7.615773105863909, 293.1985905136482), (10, 17, 6.708203932499369, 296.565051177078), (11, 15, 4.47213595499958, 296.565051177078), (12, 13, 2.23606797749979, 296.565051177078), (10, 16, 5.830951894845301, 300.9637565320735), (8, 19, 9.433981132056603, 302.0053832080835), (9, 17, 7.211102550927978, 303.69006752597977), (8, 18, 8.602325267042627, 305.5376777919744), (7, 19, 10.0, 306.86989764584405), (10, 15, 5.0, 306.86989764584405), (9, 16, 6.4031242374328485, 308.6598082540901), (8, 17, 7.810249675906654, 309.8055710922652), (7, 18, 9.219544457292887, 310.6012946450045), (6, 19, 10.63014581273465, 311.18592516570965), (5, 19, 11.313708498984761, 315.0), (6, 18, 9.899494936611665, 315.0), (8, 16, 7.0710678118654755, 315.0), (9, 15, 5.656854249492381, 315.0), (10, 14, 4.242640687119285, 315.0), (12, 12, 1.4142135623730951, 315.0), (4, 19, 12.041594578792296, 318.36646066342985), (5, 18, 10.63014581273465, 318.81407483429035), (6, 17, 9.219544457292887, 319.3987053549955), (7, 16, 7.810249675906654, 320.19442890773485), (8, 15, 6.4031242374328485, 321.3401917459099), (4, 18, 11.40175425099138, 322.1250163489018), (5, 17, 10.0, 323.13010235415595), (9, 14, 5.0, 323.13010235415595), (2, 19, 13.601470508735444, 323.9726266148964), (6, 16, 8.602325267042627, 324.4623222080256), (3, 18, 12.206555615733702, 325.00797980144137), (10, 13, 3.605551275463989, 326.30993247402023), (5, 16, 9.433981132056603, 327.9946167919165), (0, 19, 15.264337522473747, 328.3924977537511), (8, 14, 5.830951894845301, 329.0362434679265), (1, 18, 13.892443989449804, 329.74356283647074), (6, 15, 8.06225774829855, 330.25511870305775), (4, 16, 10.295630140987, 330.9453959009229), (2, 17, 12.529964086141668, 331.3895403340348), (0, 18, 14.7648230602334, 331.6992442339936), (1, 17, 13.416407864998739, 333.434948822922), (3, 16, 11.180339887498949, 333.434948822922), (5, 15, 8.94427190999916, 333.434948822922), (7, 14, 6.708203932499369, 333.434948822922), (0, 17, 14.317821063276353, 335.22485943116806), (2, 16, 12.083045973594572, 335.55604521958344), (4, 15, 9.848857801796104, 336.03751102542185), (6, 14, 7.615773105863909, 336.8014094863518), (3, 15, 10.770329614269007, 338.1985905136482), (8, 13, 5.385164807134504, 338.1985905136482), (0, 16, 13.92838827718412, 338.96248897457815), (5, 14, 8.54400374531753, 339.44395478041656), (2, 15, 11.704699910719626, 340.01689347810003), (4, 14, 9.486832980505138, 341.565051177078), (0, 15, 13.601470508735444, 342.89727103094765), (3, 14, 10.44030650891055, 343.3007557660064), (6, 13, 7.280109889280518, 344.0546040990771), (2, 14, 11.40175425099138, 344.74488129694225), (1, 14, 12.36931687685298, 345.9637565320735), (5, 13, 8.246211251235321, 345.9637565320735), (0, 14, 13.341664064126334, 347.00538320808346), (3, 13, 10.198039027185569, 348.69006752597977), (8, 12, 5.0990195135927845, 348.69006752597977), (2, 13, 11.180339887498949, 349.695153531234), (1, 13, 12.165525060596439, 350.5376777919744), (7, 12, 6.082762530298219, 350.5376777919744), (0, 13, 13.152946437965905, 351.25383773744477), (6, 12, 7.0710678118654755, 351.86989764584405), (5, 12, 8.06225774829855, 352.8749836510982), (4, 12, 9.055385138137417, 353.6598082540901), (2, 12, 11.045361017187261, 354.80557109226515), (1, 12, 12.041594578792296, 355.23635830927384), (1, 11, 12.0, 360.0), (2, 11, 11.0, 360.0), (3, 11, 10.0, 360.0), (4, 11, 9.0, 360.0), (5, 11, 8.0, 360.0), (6, 11, 7.0, 360.0), (7, 11, 6.0, 360.0), (8, 11, 5.0, 360.0), (9, 11, 4.0, 360.0), (10, 11, 3.0, 360.0), (11, 11, 2.0, 360.0), (12, 11, 1.0, 360.0)]    
    
    asteroids_to_destroy = sorted(asteroids_to_destroy, key=lambda x: (-x[3], x[2]))
    curr_angle = asteroids_to_destroy[-1][3]
    deleted = 0

    i = 0
    while True:
        asteroids_updated = []
        next_angle = asteroids_to_destroy[i][3]

        if curr_angle != next_angle:
            curr_angle = next_angle
            deleted += 1

            print(asteroids_to_destroy[i])
            if deleted == 200:
                print(asteroids_to_destroy[i])
                print(asteroids_to_destroy[i][1] * 100 + asteroids_to_destroy[i][0])
                break

        else:
            asteroids_updated.append(asteroids_to_destroy[i])

        i += 1

        if i == len(asteroids_to_destroy):
            asteroids_to_destroy = copy.deepcopy(asteroids_updated)
            i = 0


def is_different(point1, point2):
    return point1[0] != point2[0] or point1[1] != point2[1] 

# does asteroid2 hiddes asteroid1 from location
def is_hidden_by(location, asteroid1, asteroid2):
    distance_to_asteroid1 = ((location[0] - asteroid1[0])**2 + (location[1] - asteroid1[1])**2)**(1/2)
    distance_to_asteroid2 = ((location[0] - asteroid2[0])**2 + (location[1] - asteroid2[1])**2)**(1/2)
    
    if distance_to_asteroid1 < distance_to_asteroid2:
        return False

    angle_to_asteroid1 = math.atan2(asteroid1[1] - location[1], asteroid1[0]- location[0]) * 180 / math.pi
    angle_to_asteroid2 = math.atan2(asteroid2[1] - location[1], asteroid2[0] - location[0]) * 180 / math.pi

    return angle_to_asteroid1 == angle_to_asteroid2
        
main()